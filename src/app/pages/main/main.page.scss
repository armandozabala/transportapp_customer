.green-button{
 width: 100%;
 right: 10px;
 left: 10px;
}

ion-icon{
 font-size: 5em;
}

.background {
 --background: url(../../../assets/imgs/background.jpg) 0 0/100% 100% no-repeat;
 
}

// IF the browser does NOT support the  CSS Grid Layout specification
// We rely on the use of the CSS Flexbox standard instead
.wrapper {
 display: flex;

 flex-wrap: column
}

.header-logo{
  margin-top: 100px;
  margin-bottom: -100px;
}

// IF the browser DOES support the CSS Grid Layout specification
// then the following rules are applied instead
.wrapper {
 display: grid;

 // Define a 10 pixel gap between each grid track
 grid-gap: 10px;

 // Define a rule, that will be repeated for each grid column, where
 // the grid track is set to a minimum width of 300 pixels and a maximum 
 // width of the available space within the grid container (via the fr or 
 // fraction unit)

 // The auto-fill value allows as many grid tracks to be fitted into the
 // width of the grid container as possible
 grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));

 // Specify the height of the row - minimum value of 50 pixels and a maximum
 // value set to auto
 grid-auto-rows: minmax(50px, auto);

}


// Define the header/footer tag values
header,
footer {
 padding: 3em;
 margin-left: 1px;
 margin-right: 1px;
 // Add a flex rule for browsers not supporting the
 // CSS Grid Layout spec
 flex: 0 1 100%;
 // Define the start and end values for the grid column
 grid-column: 1 / -1;
 text-align: center;
 background-color: rgba(175, 186, 202, 1);
}

.box-container{
  color: white;
  text-align: center;
}
// Define the style rules for each panel within the grid
// container
.box {
 opacity: 0.9;
 border-radius: 5px;
 padding: 1.2em;
 margin-left: 25px;
 margin-right: 25px;
 // Add a flex rule for browsers not supporting the
 // CSS Grid Layout spec
 flex: 1 1 100px;

 h2 {
    font-weight: bold;
}
}


// We need to ensure that browsers that fall back to the
// Flexbox rules add a bottom margin of 10 pixels to all 
// direct child elements within the grid container (to 
// emulate the grid gap)
.wrapper > * {
margin-bottom: 5px;
}


// Use a feature query to determine if the browser supports 
// a specific CSS rule - in this case the display: grid property

// If the rule is supported then we remove the flexbox fallback 
// rule of adding 10 pixels to the bottom margin of each child 
// decendent of the grid container (to emulate the grid gap)
@supports (display: grid) {
.wrapper > * {
 margin-top: 5px;
}
}



// Add the necessary classes for styling the 
// background colours of each panel in the 
// project UI
.red {
background-color: rgba(220, 83, 81, 1);
}

.green {
background-color: rgb(34, 62, 151);
}

.blue {
background-color: rgba(131, 150, 225, 1);
}

.purple {
background-color: rgba(155, 121, 170, 1);
}

.yellow {
  background-color: rgba(235, 229, 39, 1);
}

.violet {
  background-color: rgba(213, 118, 211, 1);
}

.orange {
background-color: rgba(213, 151, 46, 1);
}

.turquoise {
background-color: rgba(105, 203, 217, 1);
}